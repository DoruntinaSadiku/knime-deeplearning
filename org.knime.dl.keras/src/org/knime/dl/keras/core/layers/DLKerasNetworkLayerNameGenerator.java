/*
 * ------------------------------------------------------------------------
 *
 *  Copyright by KNIME AG, Zurich, Switzerland
 *  Website: http://www.knime.com; Email: contact@knime.com
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License, Version 3, as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, see <http://www.gnu.org/licenses>.
 *
 *  Additional permission under GNU GPL version 3 section 7:
 *
 *  KNIME interoperates with ECLIPSE solely via ECLIPSE's plug-in APIs.
 *  Hence, KNIME and ECLIPSE are both independent programs and are not
 *  derived from each other. Should, however, the interpretation of the
 *  GNU GPL Version 3 ("License") under any applicable laws result in
 *  KNIME and ECLIPSE being a combined program, KNIME AG herewith grants
 *  you the additional permission to use and propagate KNIME together with
 *  ECLIPSE with only the license terms in place for ECLIPSE applying to
 *  ECLIPSE and the GNU GPL Version 3 applying for KNIME, provided the
 *  license terms of ECLIPSE themselves allow for the respective use and
 *  propagation of ECLIPSE together with KNIME.
 *
 *  Additional permission relating to nodes for KNIME that extend the Node
 *  Extension (and in particular that are based on subclasses of NodeModel,
 *  NodeDialog, and NodeView) and that only interoperate with KNIME through
 *  standard APIs ("Nodes"):
 *  Nodes are deemed to be separate and independent programs and to not be
 *  covered works.  Notwithstanding anything to the contrary in the
 *  License, the License does not apply to Nodes, you are not required to
 *  license Nodes under the License, and you are granted a license to
 *  prepare and propagate Nodes, in each case even if such Nodes are
 *  propagated with or for interoperation with KNIME.  The owner of a Node
 *  may freely choose the license terms applicable to such Node, including
 *  when such Node is propagated with or for interoperation with KNIME.
 * ---------------------------------------------------------------------
 *
 */
package org.knime.dl.keras.core.layers;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import org.knime.dl.core.DLTensorSpec;
import org.knime.dl.keras.core.DLKerasNetworkSpec;

import gnu.trove.TObjectIntHashMap;

/**
 * @author Marcel Wiedenmann, KNIME GmbH, Konstanz, Germany
 * @author Christian Dietz, KNIME GmbH, Konstanz, Germany
 */
public final class DLKerasNetworkLayerNameGenerator {

    // Either "prefix_layerindex" (layer name),
    // "prefix_layerindex_nodeindex:tensorindex" (tensor name),
    // "prefix_layerindex/opname:tensorindex" (tensor name, legacy),
    // "prefix_layerindex_opname:tensorindex" (tensor name, legacy) or
    // "prefix_layerindex:tensorindex" (tensor name, legacy).
    // Group 1 is prefix, group 2 is layer index, the rest is not of interest.
    private static final Pattern LAYER_NAME = Pattern.compile("(^.*)_(\\d+)(?:(_\\d+:\\d+)|(((_|/).+)?:\\d+))?");

    private static final Pattern TO_SNAKE_CASE_INTERMEDIATE = Pattern.compile("(.)([A-Z][a-z0-9]+)");

    private static final Pattern TO_SNAKE_CASE_INSECURE = Pattern.compile("([a-z])([A-Z])");

    // Mimics
    // https://github.com/keras-team/keras/blob/d673afd5979a4e541266763f65bbd65fabf20b0b/keras/engine/topology.py#L2854
    private static final String toSnakeCase(final String name) {
        final String intermediate = TO_SNAKE_CASE_INTERMEDIATE.matcher(name).replaceAll("$1_$2");
        final String insecure = TO_SNAKE_CASE_INSECURE.matcher(intermediate).replaceAll("$1_$2").toLowerCase();
        if (insecure.charAt(0) != '_') {
            return insecure;
        }
        return "private" + insecure;
    }

    public static DLKerasNetworkLayerNameGenerator
        createFromBaseNetworks(final Collection<DLKerasNetworkSpec> baseNetworks) {
        final List<String> tensorNames = baseNetworks.stream().flatMap(n -> Arrays
            .asList(n.getInputSpecs(), n.getHiddenOutputSpecs(), n.getOutputSpecs()).stream().flatMap(Arrays::stream))
            .map(DLTensorSpec::getName).collect(Collectors.toList());
        return new DLKerasNetworkLayerNameGenerator(tensorNames);
    }

    private final TObjectIntHashMap<String> m_prefixCounts;

    /**
     * @param reservedNames layer (and/or tensor) names that must not be generated by this instance e.g. because they
     *            are already present in an existing network. May be <code>null</code>.
     */
    public DLKerasNetworkLayerNameGenerator(final Collection<String> reservedNames) {
        m_prefixCounts = new TObjectIntHashMap<>(reservedNames.size() > 10 ? reservedNames.size() : 10);
        // cf. UniqueNameGenerator
        for (final String name : reservedNames) {
            final String trimmed = name.trim();
            final Matcher nameMatcher = LAYER_NAME.matcher(trimmed);
            if (nameMatcher.matches()) {
                final String prefix = nameMatcher.group(1);
                int layerIndex = 0;
                try {
                    layerIndex = Integer.parseInt(nameMatcher.group(2));
                } catch (final NumberFormatException nfe) {
                    // ignore, must be out of range
                }
                final int prefixCount = m_prefixCounts.get(prefix);
                if (layerIndex > prefixCount) {
                    m_prefixCounts.put(prefix, layerIndex);
                }
            }
        }
    }

    public String getNextLayerName(final DLKerasLayer layer) {
        final String identifier = layer.getKerasIdentifier();
        final int prefixStartIndex = identifier.lastIndexOf('.') + 1;
        final String prefix =
            prefixStartIndex != 0 ? toSnakeCase(identifier.substring(prefixStartIndex).toLowerCase()) : "layer";
        final int index = m_prefixCounts.adjustOrPutValue(prefix, 1, 1);
        return prefix + "_" + index;
    }

    public String getOutputTensorName(final String layerName, final int nodeIndex, final int tensorIndex) {
        // equals the naming scheme in DLKerasNetworkSpecExtractor on Python side
        return layerName + "_" + nodeIndex + ":" + tensorIndex;
    }
}
